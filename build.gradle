group 'ch.interlis'
version '1.0.1'+System.getProperty('release','-SNAPSHOT')

apply plugin: "java"
apply plugin: "maven"

configurations {
    deployerJars
}

// to get the latest SNAPSHOT uncomment the following lines
//configurations.all {
//    // check for updates every build
//    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
//}

sourceCompatibility = "1.6" 
targetCompatibility = "1.6"

dependencies {
    compile(group: 'org.geotools', name: 'gt-shapefile', version: '10.8') {
        exclude group: 'com.vividsolutions', module: 'jts' // use version that iox-ili depends on
    }
    testCompile group: 'junit', name: 'junit', version: '4.+'
    compile group: 'ch.interlis', name: 'iox-ili', version: '1.20.1'
    compile group: 'ch.interlis', name: 'ili2c-tool', version: '4.7.+'
    compile group: 'ch.ehi', name: 'ehisqlgen', version: '1.13.5'
    runtime group: 'org.xerial', name: 'sqlite-jdbc', version: '3.21.0.1'
	runtime group: 'org.geotools', name: 'gt-epsg-hsql', version: '10.8'
	testCompile group: 'org.postgresql', name: 'postgresql', version: '42.1.4.jre6'
	compile('ch.interlis:ili2pg:3.+') {
        exclude group: 'ch.interlis', module: 'iox-ili'
    }
//    compile (group: 'ch.interlis', name: 'ili2gpkg', version: '3.11.3') {
//        exclude group: 'ch.interlis', module: 'iox-ili'
//    }
    compile fileTree(dir: 'libs', include: 'ili2gpkg-3.11.99.jar')
	deployerJars "org.apache.maven.wagon:wagon-ftp:3.0.0"
}

repositories {
    mavenLocal()
    maven {
        url "http://jars.interlis.ch"
    }
    maven {
        url "http://download.java.net/maven/2"
    }
    maven {
		url "http://download.osgeo.org/webdav/geotools/"
    }
    maven {
    	url "http://maven.geo-solutions.it"
    }
    maven {
    	url "http://repo.maven.apache.org/maven2"
    }
    mavenCentral()
}

Properties properties = new Properties()
File propFile=project.rootProject.file('user.properties')
if(propFile.exists()){
	properties.load(propFile.newDataInputStream())
}
def git = System.getProperty('git',properties.get('git','git'))
def repos_pwd = System.getProperty('repos_pwd',properties.get('repos_pwd','repos_pwd'))
def repos_usr = System.getProperty('repos_usr',properties.get('repos_usr','repos_usr'))
def dburl = System.getProperty('dburl',properties.get('dburl'))
def dbusr = System.getProperty('dbusr',properties.get('dbusr'))
def dbpwd = System.getProperty('dbpwd',properties.get('dbpwd'))
    
def generatedResources = "$buildDir/generated-resources/main"

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine git, 'rev-parse', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

sourceSets {
  main {
    //let's register an output folder on the main SourceSet:
    output.dir(generatedResources, builtBy: 'generateMyResources')
    //it is now a part of the 'main' classpath and will be a part of the jar
  }
    test {
        resources {
            srcDirs = ['test/data']
        }
    }
}

task generateMyResources {
	doLast {
		def versionProps = new Properties()
		versionProps.setProperty('version', "$project.version")
		versionProps.setProperty('versionCommit', getGitHash())
		def versionPropsFile = new File(generatedResources,"ch/interlis/ioxwkf/Version.properties")
		versionPropsFile.getParentFile().mkdirs();
		versionProps.store(versionPropsFile.newWriter(), null);
	}
}


test {
	// when Gradle forks a new Java process, it does not automatically pass the 
	// environment variable values along to the new environment. One has to 
	// explicitly pass these variables
	systemProperty 'dburl', dburl
	systemProperty 'dbusr', dbusr
	systemProperty 'dbpwd', dbpwd
    testLogging.exceptionFormat = 'full'
}

uploadArchives {
    repositories {
        mavenDeployer {
        	configuration = configurations.deployerJars
			repository(url: 'ftp://ftp.interlis.ch'){
            	authentication(userName: repos_usr, password: repos_pwd)
            }
        }
    }
}
